< 동적 계획법 1 >

9461. 파도반 수열
* 컴파일 에러 *
  t = int(input())

  length_list[0] = 1, length_list[1] = 1, length_list[2] = 1,
  length_list[3] = 2, length_list[4] = 2

  for _ in range(t):
      n = int(input())

      result = 0
      for i in range(5, n):
          length_list[i] = length_list[result] + length_list[i - 1]
          result += 1
      print(length_list[n - 1])

* 런타임 에러 *
  t = int(input())

  length_list = [0] * 101
  length_list[0] = 1; length_list[1] = 1; length_list[2] = 1,
  length_list[3] = 2; length_list[4] = 2

  for _ in range(t):
      n = int(input())

      for i in range(5, n):
          length_list[i] = length_list[i-5] + length_list[i - 1]
      print(length_list[n - 1])
      
* 해답 *
length_list 끝에 쉽표(,)가 있었다... (어이없음)
이것땜에 30분 잡아먹다니


1149. RGB 거리
  n = int(input())                        #집의 수
  matrix = [[0] * 3 for i in range(n)]

  for i in range(n):                      #각 색별 칠하는 비용
      matrix[i][0], matrix[i][1], matrix[i][2] = map(int, input().split())

  matrix2 = [[0] * 3 for i in range(n)]

  for i in range(n):
      if i == 0:
          matrix2[i] = matrix[i]
      else:
          matrix2[i][0] = matrix[i][0] + min(matrix2[i-1][1], matrix2[i-1][2])
          matrix2[i][1] = matrix[i][1] + min(matrix2[i-1][0], matrix2[i-1][2])
          matrix2[i][2] = matrix[i][2] + min(matrix2[i-1][0], matrix2[i-1][1])

  print(min(min(matrix2[n - 1][0], matrix2[n - 1][1]), matrix2[n - 1][2]))
  
  DP를 이용해서 푸는 기본적인 문제로, 부분해를 구하는 것이 포인트이다. 이 문제에서의 부분해는 
  i번째 집까지 색을 칠할 때의 최소비용이다. 그리고 문제에서 이웃끼리는 서로 같은 색으로 칠할 수 
  없다고 했으므로, 만약에 i-1번째 집에 빨간색이 칠해지면 i번째는 초록색과 파란색 중 더 비용이 
  작은 색을 칠하면 되고, 마찬가지로 i-1번째 집이 초록색으로 칠해지면 i번째는 빨간색과 파란색 중 하나,
  i-1번째집이 파란색이면 i번째집은 빨간색과 초록색 중 하나로 칠해주면 된다. 그런식으로 칠하는 것을 
  반복하면서 DP배열을 채워준 후 DP에서 n번째 집에 해당하는 곳에서 어떤 것이 가장 최소인지를 판단하여 
  출력해주면 된다.

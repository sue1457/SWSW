< 동적 계획법 1 >
11053. 가장 긴 증가하는 부분 수열 (LIS(Longest Increasing Subsequence)를 구하는 문제)
* 틀린 내 코드 * ==> 결과는 잘 나옴
  n = int(input())
  num = list(map(int, input().split()))
  count = 1
  result = []
  result.append(num[0])

  for i in range(1, n):
      if num[i] > result[-1]:
          result.append(num[i])
          count += 1

  print(count)
  
* 해답 *
  n = int(input())
  num = list(map(int, input().split()))
  dp = [0 for _ in range(n)]

  for i in range(n):
      for j in range(i):
          if num[i] > num[j] and dp[i] < dp[j]:
              dp[i] = dp[j]
      dp[i] += 1

  print(max(dp))

11054. 가장 긴 바이토닉 부분 수열  (LIS 응용 문제1)
  n = int(input())
  num = list(map(int, input().split()))
  dp_forward = [0 for _ in range(n)]
  dp_reverse = [0 for _ in range(n)]
  dp_bitonic = [0 for _ in range(n)]

  for i in range(n):
      for j in range(i):
          if num[i] > num[j] and dp_forward[i] < dp_forward[j]:
              dp_forward[i] = dp_forward[j]
      dp_forward[i] += 1

  for i in range(n-1, -1, -1):
      for j in range(n-1, i, -1):
          if num[i] > num[j] and dp_reverse[i] < dp_reverse[j]:
              dp_reverse[i] = dp_reverse[j]
      dp_reverse[i] += 1

  for i in range(n):
      dp_bitonic[i] = dp_forward[i] + dp_reverse[i] - 1

  print(max(dp_bitonic))
  
  정방향으로 for문을 돌려주고, 역방향으로도 for문을 돌려서 둘을 합치면 바이토닉 부분 수열이 나온다.
  합쳐진 바이토닉 부분 수열중 가장 큰 값을 출력해준다.

2565. 전깃줄  (LIS 응용 문제2)
  n = int(input())
  wire = []
  wire_b = []
  dp = [0 for _ in range (n)]

  for i in range(n):
      wire.append(list(map(int, input().split())))
  wire.sort(key = lambda x:x[0])

  for i in range(n):
      wire_b.append(wire[i][1])

  for i in range(n):
      for j in range(i):
          if wire_b[i] > wire_b[j] and dp[i] < dp[j]:
              dp[i] = dp[j]
      dp[i] += 1

  print(n - max(dp))
  
  전봇대 A와 B에 들어갈 숫자를 리스트화 하고 A를 기준으로 정렬 한 뒤 B의 숫자들을 LIS 해서
  전체길이에서 가장 긴 LIS의 길이를 빼준다 (8 - 5 = 3)
  
9251. LCS (LCS(Longest Common Subsequence)를 구하는 문제)
  m = list(input())
  n = list(input())
  m_len = len(m)
  n_len = len(n)
  dp = [[0] * (n_len + 1) for _ in range(m_len + 1)]

  for i in range(1, m_len + 1):
      for j in range(1, n_len + 1):
          if m[i - 1] == n[j - 1]:
              dp[i][j] = dp[i - 1][j - 1] + 1
          else:
              dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

  print(dp[-1][-1])
  
  m과 n의 리스트의 값을 서로 비교해나가며 두 수가 같다면 현재 위치에 왼쪽대각선 숫자 +1한 값을 넣는다.
  두 수가 같지 않다면 현재 위치의 왼쪽과 위쪽을 비교해서 더 큰 값을 넣는다.
  
1912. 연속합
  n = int(input())
  num = list(map(int, input().split()))
  sum = [num[0]]  #비교를 위해서 num[0]을 넣어준다

  for i in range(len(num) - 1):
      sum.append(max(sum[i] + num[i + 1], num[i + 1]))

  print(max(sum))
  
12865. 평범한 배낭 - 냅색 알고리즘
  n, k = map(int, input().split())   #총 물건의 개수와 버틸 수 있는 무게
  stuff = [[0, 0]]
  knapsack = [[0 for _ in range(k + 1)] for _ in range(n + 1)]
  #n과 k를 비교할 매트리스를 생성

  for _ in range(n):
      stuff.append(list(map(int, input().split())))

  #냅색 문제 풀이 알고리즘
  for i in range(1, n + 1):
      for j in range(1, k + 1):
          weight = stuff[i][0]
          value = stuff[i][1]

          if j < weight:
              knapsack[i][j] = knapsack[i - 1][j] #weight보다 작으면 위의 값을 그대로 가져온다.
          else:
              knapsack[i][j] = max(value + knapsack[i - 1][j - weight], knapsack[i - 1][j])

  print(knapsack[-1][-1])
  
  해당 문제도 그렇고 DP를 통한 LIS와 LCS의 풀이법의 공통점은 원소들의 사슬관계를 나타낼 수 있는
  매트리스를 머리속으로 구상할 줄 알아야하며, 그 안에 있는 규칙을 for문 안의 if문으로 나타내는 것이
  중점이었다.

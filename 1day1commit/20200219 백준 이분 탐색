< 이분 탐색 >



*** 이분 탐색 알고리즘의 기본 코드 ***

def BinarySearch(arr, val, low, high):
    if low > high:
        return False #해당 배열에 타겟 숫자 미존재
    
    mid = (low + high) // 2 #위치 기반으로 찾는 것
    
    if arr[mid] > val:
        return BinarySearch(arr, val, low, mid - 1) #수가 중앙 값보다 아래 있는 경우
    elif arr[mid] < val:
        return BinarySearch(arr, val, mid + 1, high) #수가 중앙 값보다 위에 있는 경우
    else:
        return True #아니면 숫자를 출력 -> return val
        
        

1920. 수 찾기

def find(arr, val, low, high):
    if low > high:
        return False
    
    mid = (low + high) // 2
    if arr[mid] > val:
        return find(arr, val, low, mid - 1)
    elif arr[mid] < val:
        return find(arr, val, mid + 1, high)
    else:
        return True

N = int(input())
arrN = list(map(int, input().split()))
M = int(input())
arrM = list(map(int, input().split()))
arrN = sorted(arrN)

for m in arrM:
    if find(arrN, m, 0, N-1):
        print(1)
    else:
        print(0)
        
        
10816. 숫자 카드 2

N = int(input())
arrN = list(map(int, input().split()))
M = int(input())
arrM = list(map(int, input().split()))

N_count = {}
for n in arrN:
    try:
        N_count[n] += 1
    except:
        N_count[n] = 1

answer = []
for m in arrM:
    try:
        answer.append(N_count[m])
    except:
        answer.append(0)

for i in answer:
    print(i, end = ' ')
    
    
2805. 나무 자르기

N, M = map(int, input().split())
tree = list(map(int, input().split()))
start, end = 1, max(tree)

while start <= end:
    mid = (start + end) // 2

    log = 0 #벌목된 나무 총합
    for i in tree:
        if i >= mid:
            log += i - mid
    
    if log >= M:
        start = mid + 1
    else:
        end = mid - 1

print(end)


2110. 공유기 설치

import sys
N, C = map(int, input().split())
house = [int(sys.stdin.readline()) for _ in range(N)]

def router_counter(distance):
    count = 1
    cur_house = house[0]    #시작점
    for i in range(1, N):
        if cur_house + distance <= house[i]:
            count += 1
            cur_house = house[i]
    return count

house = sorted(house)
start, end = 1, house[-1] - house[0]

while start <= end:
    mid = (start + end) // 2

    if router_counter(mid) >= C:
        answer = mid
        start = mid + 1
    else:
        end = mid - 1

print(answer)

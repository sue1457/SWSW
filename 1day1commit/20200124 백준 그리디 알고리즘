< 그리디 알고리즘 >

그리디 알고리즘이란? 출처 - [https://www.zerocho.com/category/Algorithm/post/584ba5c9580277001862f188]
그리디 알고리즘은 동적 프로그래밍 사용 시 지나치게 많은 일을 한다는 것에서 착안하여 고안된 알고리즘이다. 
동적 프로그래밍을 대체하는 것은 아니고 같이 쓰이며 서로 보완하는 개념이다. 그리디 알고리즘은 
탐욕 알고리즘 또는 욕심쟁이 알고리즘이라고도 불리는데, 미래를 생각하지 않고 각 단계에서 가장 최선의 선택을
하는 기법이다. 이렇게 각 단계에서 최선의 선택을 한 것이 전체적으로도 최선이길 바라는 알고리즘이다. 
물론 모든 경우에서 그리디 알고리즘이 통하지는 않는다. 쉬운 예를 들자면 지금 선택하면 1개의 마시멜로를 받고,
1분 기다렸다 선택하면 2개의 마시멜로를 받는 문제에서는, 그리디 알고리즘을 사용하면 항상 마시멜로를 
1개밖에 받지 못한다. 지금 당장 최선의 선택은 마시멜로 1개를 받는 거지만, 결과적으로는 1분 기다렸다가 
2개 받는 게 최선이기 때문이다.

11047. 동전0
  n, k = map(int, input().split())
  m = []
  num = 0

  for _ in range(n):
      m.append(int(input()))

  for i in range(n - 1, -1, -1):
      if k == 0:
          break
      if m[i] > k:
          continue
      num += k // m[i]
      k %= m[i]

  print(num)
  
1931. 회의실 배정
  n = int(input())
  time = [[0] * 2 for _ in range(n)]

  for i in range(n):
      start, end = map(int, input().split())
      time[i][0] = start
      time[i][1] = end

  time.sort(key = lambda x:(x[1], x[0]))
  count = 1
  end_time = time[0][1]

  for i in range(1, n):
      if time[i][0] >= end_time:
          count += 1
          end_time = time[i][1]

  print(count)
  
11399. ATM
  n = int(input())
  time = list(map(int, input().split()))

  if n == 1:
      print(time[0])
  else:
      time.sort()

      accumulate_sum = 0   #이전 사람들이 돈을 인출하는데 걸렸던 시간을 포함
      all_sum = 0          #모든 걸린 시간의 합

      for i in range(n):
          all_sum += accumulate_sum + time[i]
          accumulate_sum += time[i]

      print(all_sum)
      
1541. 잃어버린 괄호
  example = input().split('-')
  result = 0

  for i in example[0].split('+'):
      result += int(i)

  for i in example[1:]:
      for j in i.split('+'):
          result -= int(j)

  print(result)

< 그리디 알고리즘 >

2001. 최소 대금

result_pasta = []
for i in range(3):
    pasta = int(input())
    result_pasta.append(pasta)

result_juice = []
for i in range(2):
    juice = int(input())
    result_juice.append(juice)

max_price = 1.1 * (2000 + 2000)
for i in result_pasta:
    for j in result_juice:
        price = 1.1 * (i + j)
        if price < max_price:
            max_price = price

print('%0.1f' %(max_price))


3120 : 리모컨

* 틀린 내 코드 *
a, b = map(int, input().split())
count = 0

if a < b:
    c = b - a
    if c // 10 != 0:    # c // 10 = 2
        count += (c // 10)    # count = 2
        c = c - 10 * (c // 10)  # c = 27 - 10 * 2 = 7    
    if c // 5 != 0: # c // 5 = 1
        count += (c // 5)   # count = 2 + 1 = 3
        c = c - 5 * (c // 5)    # c = 7 - 5 * 1 = 2
    if c < 5:
        count += c  # count = 3 + 2 = 5
        c = c - c   # c = 2 - 2 = 0 

if a > b:
    c = a - b
    if c // 10 != 0:    
        count += (c // 10)    
        c = c - 10 * (c // 10)         
    if c // 5 != 0: 
        count += (c // 5)   
        c = c - 5 * (c // 5)    
    if c < 5:
        count += c  
        c = c - c  

print(count)

온도를 올리기만 하거나 내리기만 하는 경우로 생각하고 코드를 작성해서 오류가 생김.
온도를 목표 온도에 가장 가깝게 올린다음 내리거나 내린다음 올리는 경우의 수도 생각을 해야 함.
밑은 구글링 해서 찾은 그에 따른 어느 블로그의 코드이다. 생각보다 머리 터지는 문제이다.

* 해답 *
def solve(temper, ret) :
    cnt = 0
    if ret//temper > 0 :
        cnt = ret//temper
        ret = ret%temper
    return cnt, ret 

if __name__ == '__main__' :
    # [10, 5, 1] : 1 생략한 이유는 반복을 최소화 하기 위해
    temper = [10, 5]

    n = list(map(int, input().split()))
    # 온도를 낮추는 경우를 줄이기위해 큰 값을 무조건 n[1]에 놓는다
    if n[0] > n[1] :
        n[0], n[1] = n[1], n[0]

    ret = n[1] - n[0]
    cnt = 0
    # 제일 큰 값부터 계산해 간다 10 ~ 5 
    for i in temper :
        tmp, ret= solve(i, ret)
        cnt += tmp
        # 9 가 남을 경우 10 올리고 -1 하는 경우가 5한번 1 네 번보다 적기 때문
        # 8 인 경우도 10 올리고 -1 -1 하는 경우가 더 적다
        if ret == 9 :
            cnt += 2
            ret = 0
            break
        elif ret == 8 :
            cnt += 3
            ret = 0
            break
        # 4 가 남을 경우는 5 올리고 -1 하는 경우가 1 네번 올리는 것보다 적다
        elif ret == 4 :
            cnt += 2
            ret = 0
            break
    print(cnt+ret)

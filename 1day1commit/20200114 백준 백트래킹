< 백트래킹 >

15649. N과 M - 1
  import itertools

  n, m = map(int, input().split())
  num_list = [i for i in range(1, n+1)]

  for num in itertools.permutations(num_list, m):
    for i in num:
      print(i, end = ' ')
    print(end = '\n')
    
15650. N과 M - 2
  import itertools

  n, m = map(int, input().split())
  num_list = [i for i in range(1, n+1)]

  for num in itertools.combinations(num_list, m):             # permutations를 combinations로 변경
    for i in num:
      print(i, end = ' ')
    print(end = '\n')
    
15651. N과 M - 3
  import itertools

  n, m = map(int, input().split())
  num_list = [i for i in range(1, n+1)]

  for num in itertools.product(num_list, repeat = m):         # product 사용, repeat값은 m 
    for i in num:
      print(i, end = ' ')
    print(end = '\n')

15652. N과 M - 4
import itertools

n, m = map(int, input().split())
num_list = [i for i in range(1, n+1)]

for num in itertools.combinations_with_replacement(num_list, m):  # combinations_with_replacement 사용
  for i in num:
    print(i, end = ' ')
  print(end = '\n')
  
9663. N-Queen  ==> 이해 불가 코드
  def isPromising(k, col):
    for row in range(1, k):
      if col == x[row] or abs(col - x[row]) == abs(k - row):
        return False
    return True

  def nQueens(k):
    global count
    for col in range(1, n + 1):
      if isPromising(k, col) == True:
        x[k] = col
        if k < n:
          nQueens(k + 1)
        else:
          count += 1

  count = 0
  n = int(input())
  x = [0] * (n + 1)
  nQueens(1)
  print(count)
  
2580. 스도쿠  ==> 백트래킹의 주된 문제인데, 이해하는데 1시간 반 걸림
  import sys

  sudoku = [list(map(int, input().split())) for _ in range(9)]
  zeros = [(i, j) for i in range(9) for j in range(9) if sudoku[i][j] == 0]
  flag = False

  def is_promising(i, j):
    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    for k in range(9):
      if sudoku[i][k] in nums:
        nums.remove(sudoku[i][k])
      if sudoku[k][j] in nums:
        nums.remove(sudoku[k][j])

    i //= 3
    j //= 3
    for p in range(i * 3, (i + 1) * 3):
      for q in range(j * 3, (j + 1) * 3):
        if sudoku[p][q] in nums:
          nums.remove(sudoku[p][q])

    return nums

  def dfs(x):
    global flag

    if flag:
      return

    if x == len(zeros):
      for row in sudoku:
        print(*row)
      flag = True
      return

    else:
      (i, j) = zeros[x]
      nums = is_promising(i, j)

      for num in nums:
        sudoku[i][j] = num
        dfs(x + 1)
        sudoku[i][j] = 0

  dfs(0)

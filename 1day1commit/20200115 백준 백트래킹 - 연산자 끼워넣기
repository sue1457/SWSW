< 백트래킹 >
14888. 연산자 끼워넣기 - (삼성 SW 역량 테스트 기출 문제 1)
* sys.maxsize, sys.minsize * ==> 시간초과
import sys
from itertools import permutations

# 연산자를 개수에 맞게 분배
def setOperatorList(n, add, sub, mul, div):
  operator = []

  for _ in range(n-1):
    if add > 0:
      operator.append('+')
      add -= 1
    elif sub > 0:
      operator.append('-')
      sub -= 1
    elif mul > 0:
      operator.append('*')
      mul -= 1
    elif div > 0:
      operator.append('/')
      div -= 1

  return operator

#수를 연산자에 의한 계산을 수행
def solve(n, a, operator):
  result = a[0]

  for i in range(n-1):
    if operator[i] == '+':
      result = result + a[i+1]
    elif operator[i] == '-':
      result = result - a[i+1]
    elif operator[i] == '*':
      result = result * a[i+1]
    elif operator[i] == '/':
      result = int(result / a[i+1])    #정수 나눗셈으로 몫만 취하기 위해 int를 사용
  
  return result

if __name__ == '__main__':
  n = int(sys.stdin.readline())
  a = [i for i in list(map(int, sys.stdin.readline().split()))]
  add, sub, mul, div = map(int, sys.stdin.readline().split())
  results = []

  #사용할 연산자 목록
  operatorList = setOperatorList(n, add, sub, mul, div)

  #연산자들을 순서를 바꿔서 순열 리스트로 작성
  operators = itertools.permutations(operatorList)

  for operator in operators:
    result = solve(n, a, operator)
    results.append(result)
  
  print(max(results))
  print(min(results))
  
===================================
maxVal = -sys.maxsize
minVal = sys.maxsize
으로 지정하고 포인터 사이즈를 사용해서 구조의 길이를 제한해도
시간 초과가 발생
==> math.inf를 사용해 보았다. 역시 시간초과가 났다.
====================================

* math.inf * ==> 시간초과
import sys
from itertools import permutations
import math
 
def setOperatorList(N, add, sub, mul, div):
    operator = []
 
    for i in range(N-1):
        if add > 0:
            operator.append("+")
            add -= 1
        elif sub > 0:
            operator.append("-")
            sub -= 1
        elif mul > 0:
            operator.append("*")
            mul -= 1
        elif div > 0:
            operator.append("/")
            div -= 1
 
    return operator
 
 
def solve(N, A, operator):
    result = A[0]
 
    for i in range(N-1):
        if operator[i] == "+":
            result = result + A[i+1]
        elif operator[i] == "-":
            result = result - A[i+1]
        elif operator[i] == "*":
            result = result * A[i+1]
        elif operator[i] == "/":
            result = int(result / A[i+1])
 
    return result
 
maxVal, minVal = -math.inf, math.inf
if __name__ == '__main__':
    N = int(sys.stdin.readline())
    A = [i for i in list(map(int, sys.stdin.readline().split()))]
    add, sub, mul, div = map(int, sys.stdin.readline().split())
    
    operatorList = setOperatorList(N, add, sub, mul, div)
 
    operators = permutations(operatorList)
 
    for operator in operators:
        result = solve(N, A, operator)
 
        if result < minVal:
            minVal = result
        
        if result > maxVal:
            maxVal = result
 
    print(maxVal)
    print(minVal)  

=======================================================
* dfs를 사용한 코드 * ==> 정상 작동
def dfs(index, result, add, sub, mul, div):
    global n, maxn, minn
    if index == n:
        maxn = max(result, maxn)
        minn = min(result, minn)
        return
    else:
        if add:
            dfs(index +1, result + s[index], add-1,sub,mul,div)
        if sub:
            dfs(index +1, result - s[index], add,sub-1,mul,div)
        if mul:
            dfs(index +1, result * s[index], add,sub,mul-1,div)
        if div:
            dfs(index +1, int(result / s[index]), add,sub,mul,div-1)
n = int(input())
s = list(map(int, input().split()))
a, b, c, d = map(int, input().split())

maxn = -1e9
minn = 1e9
dfs(1, s[0],a, b, c, d)
print(maxn)
print(minn)
    

14889. 스타트와 링크 - (삼성 SW 역량 테스트 기출 문제 2)
->20200116

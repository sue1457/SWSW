7: 다른 데이터 타입: 튜플(tuple), 딕셔너리(dictionary), 집합(set) 


1. 튜플(tuple) 

a. 튜플과 리스트의 차이점:
  i. 리스트는 대 괄호로 감싸 정의하지만, 튜플은 소괄호 ( )로 정의한다  
     예:
     >>> a = [1, 3, 2] # 1, 3, 2를 세 원소로 갖는 리스트  
     >>> b = (1, 3, 2) # 1, 3, 2를 세 원소로 갖는 튜플 
 
  ii. 결정적 차이는 튜플의 원소를 변경할 수 없다는 것이다 
     예: 위의 a, b에 대해서,
     >>> a[1] = 8  # a[1]이 3에서 8로 변경  
     >>> b[1] = 8  # 이 경우엔 아래와 같은 에러가 발생 
     Traceback (most recent call last):
     File "<stdin>", line 1, in <module> 
     TypeError: 'tuple' object does not support item assignment 

  iii. 지원되는 연산 
     - indexing(인덱스로 접근), slicing, 튜플 더하기(연결), 곱하기(반복) 
  
  iv. 지원되지 않는 연산 
     - 수정(update), 삽입(append, insert), 제거(delete) 
 
  v. 예1:
     >>> fruits = ("apples", "pairs", "apricots", "bananas") 
     >>> fruits[1] 
     'pairs' 
     >>> fruits[-2] 
     'apricots' 
     >>> fruits[1:4] 
     ('pairs', 'apricots', 'bananas') 
     >>> list_fruits = list(fruits) # list(fruits)는 fruits 튜플을 리스트로 형변환 
     >>> list_fruits
     ['apples', 'pairs', 'apricots', 'bananas'] 
     >>> "apricots" in fruits 
     True 
     >>> fruits.index("bananas") 
     3 
     >>> w, x, y, z = fruits # fruits의 네 원소 w,x,y,z에 각각 복사 
     >>> print(w, x, y, z) 
     apples pairs apricots bananas 
 
  vi. 그러면, 언제 튜플 데이터 타입을 사용하면 유용한가? 
     ● 튜플 원소 값이 시작부터 끝까지 변하지 않는 경우: 예를 들어, 
       >>> p = (10, 2) # p, q는 평면의 두 점이라면 대부분의 경우  
       >>> q = (-4, 8)  # 좌표 값이 바뀌지 않는다 → 튜플이 유용 
     ● 다음 예제처럼, 특정 값들을 특별한 이름으로 사용하고 싶을 때  
       >>> (MON, TUE, WED, THU, FRI, SAT, SUN) = range(7)   
       >>> TUE  
       1 
       
2. 딕셔너리(dictionary, 사전)  

  a. 딕셔너리는 단어 뜻 그대로 사전 형식의 데이터 타입이다.
      i. 사전의 각 항목은 key 값과 value 값의 쌍으로 정의된다.  
      
      ii. 예를 들어, 영한사전인 경우는 key 값은 영어 단어이고 value 값은 단어에 대한 한글 설명이다 
  
  b. 리스트, 튜플과 유사점과 차이점 
      i. [차이점] {key1: value1, key2: value2, … } 형식으로 {}를 사용한다 
      
      ii. [차이점] 데이터의 저장 순서가 중요하지 않다 (즉, index로 데이터를 접근하지 않음) 
          ⇒ key 값으로 value 값을 접근한다 
      
      iii. [유사점] 리스트처럼 수정, 삽입, 삭제가 가능하다 

  c. 예: 
      >>> d = {'cs101':'python programming', 'cs202':'data structures'} 
      >>> d 
      {'cs101':'python programming', 'cs202':'data structures'} 
      >>> d['cs101']      # access: d[key]면 value 값을 의미
      'python programming' 
      >>> d['cs301'] = 'operating system' # insert 'cs301' key 가 없으므로  # 새로 생성 후 삽입 
      >>> d 
      {'cs101':'python programming', 'cs202':'data structures', 'cs301': 'operating system'} 
      >>> d['cs202'] = "data structure" # update d['cs202']의 value 값을 수정 
      >>> d 
      {'cs101':'python programming', 'cs202':'data structure', 'cs301': 'operating system'} 
      >>> d[8] = "capstone project"   # key 값의 타입이 모두 같을 필요는 없다! 
      >>> d  
      {'cs101':'python programming', 'cs202':'data structure', 'cs301': 'operating system', 
      8: 'capstone project'} 
      >>> del d[8]   # delete del d[8]은 key = 8인 항목을 제거 
      >>> d 
      {'cs101':'python programming', 'cs202':'data structure', 'cs301': 'operating system'} 
      >>> 'cs202' in d         # membership
      True
      
  d. 주의점 및 유용한 함수들 
      i. key 값은 모두 달라야 한다. (예: 주민번호, 학번 등) 
         >>> a = {1:'A', 1:'B'}  # 두 항목 모두 key 값이 1로 중복됨 
         >>> a[1]  # a[1]이 어떤 value 값을 나타내는지는 불확실 
         'B' 
      
      ii. key 값이 되는 데이터 타입은 제한이 있다. 주로 str, int, tuple을 사용 
      
      iii. value 값이 될 수 있는 데이터 타입에는 제한이 없다. 리스트, 튜플도 가능 

      iv. d.get(key, default): d에서 key인 항목의 value 값을 리턴하는 데, 그런 key가 없으면 
          default 값을 리턴 (default 값을 생략하면 d[key]와 완전히 같다)  
          예:   
          >>> print(d.get('cs101'))  
          >>> 'python programming'  
          >>> print(d['cs111']) 
          Traceback (most recent call last):   
          File "<stdin>", line 1, in <module> 
          KeyError: 'cs111' 
          >>> print(d.get('cs111', None))  # None은 no value를 나타내는 특별한 키워드 (C의 NULL과 유사)  
          >>> None     

      v. d.setdefault(key, default): d에 key 값이 있으면 해당 value값을 돌려주고, 
         없으면 d[key] = default를 수행 후 default를 돌려줌  
         예:
         >>> d = {'melon': 2, 'banana': 3}  
         >>> d['apple'] = 0 # 'apple'이 d에 없으므로 ('apple', 0)이 삽입  
         or  
         >>> d.setdefault('apple', 0) # d['cs101'] = 0과 동일 + 0이 출력  
         0  
         >>> d.setdefault('banana', 2) # 이미 있으므로 3이 반환되어 출력  
         3 
 
      vi. d.keys():  d의 key 값들의 수열(sequence)를 알려준다 
          d.values(): d의 value 값들의 수열을 알려준다 
          d.items():   d의 (key, value) 튜플의 수열을 알려준다 
          예: 
          >>> k = list(d.keys()) 
          >>> k 
          ['cs101', 'cs202', 'cs301'] 
          >>> v = list(d.values()) 
          >>> v 
          ['python programming', 'data structure', 'operating system'] 
          >>> items = list(d.items()) 
          >>> items # items는 (key, value) 튜플들의 리스트가 된다 
          [('cs101', 'python programming'), ('cs202', 'data structure'), 
           ('cs301', 'operating system')] 
 
      vii. value 값에 어떤 타입도 올 수 있다 (또 다른 dict가 value 값이 될 수도)  
          >>> d = {"name":"Chansu", "addr":{"city":"Seoul", "zip":1235}} 
          >>> d 
          {'name': 'Chansu', 'addr': {'city': 'Seoul', 'zip': 1235}} 
 
      viii. 딕셔너리 생성 예제  
          >>> a = {}  # 빈 딕셔너리 a 
          >>> b = dict() # 빈 딕셔너리 b 
          >>> a == b  # 빈 딕셔너리를 만드는 두 가지 방법 
          True 
          >>> a = {'one':1, 'two':2, 'three':3} 
          >>> b = dict(one=1, two=2, three=3) 
          >>> c = dict( [('two',2), ('one', 1), ('three', 3)] ) 
          >>> a == b == c  # 세 가지 동일한 방법 
          True 
 
  e. 딕셔너리는 언제 사용하나? 
      ● Python은 딕셔너리를 내부적으로 해시 테이블(hash table)로 구현된다.  
      ● access, update, delete 등의 연산이 매우 빠르기 때문에, 큰 데이터를 저장할 때 사용하면 
        매우 효율적인 프로그램을 작성할 수 있다 

3. 집합(set) 
  a. 수학에서 말하는 집합은 서로 다른 값들의 모임이다. 
  
  b. Python에서도 서로 다른 key 값들의 모임을 집합 데이터 타입으로 정의한다  

  c. 리스트, 튜플과의 차이점 
    ==> 리스트, 튜플은 index 값에 따라 순서대로 저장되어, index 값으로 접근가능 
        그러나 집합은 순서없이 저장되어 접근 불가 
       
  d. 딕셔너리와의 차이점과 공통점 
    i. [차이점] (key 값, value 값) 쌍이 아닌 key 값만으로 구성되어 있음 
    
    ii. [공통점] 집합의 key 값이 될 수 있는 데이터 타입은 str, number(int, float), tuple 등이며, 
        key 값의 중복을 허락하지 않는다 
        
  e. 생성  
    >>> s1 = {1, 2, 3} 
    >>> s2 = set((1, 2, 3)) 
    >>> s3 = set([1, 2, 3]) 
    >>> s1 == s2 == s3 
    True 
 
  f. 지원 연산들: 수학에서 집합과 관련된 연산은 대부분 지원함 
    i. 원소 하나 추가, 여러 개 추가, 제거 연산들  
      >>> s = {1, 2} 
      >>> s.add(3)   # add 함수를 이용한 원소 하나 추가 
      >>> s 
      {1, 2, 3} 
      >>> len(s)   # 집합의 원소 개수 
      3 
      >>> s.update([2, 4, 5])  # 리스트에 여러 개의 원소를 동시 추가 
      >>> s 
      {1, 2, 3, 4, 5} 
      >>> s.update({1, 9}, {"Hi", "Bye"}) # 다른 두 집합의 원소를 추가 
      >>> s 
      {'Hi', 1, 2, 3, 4, 5, 9, 'Bye'} 
      >>> s.discard(3)  # 제거 연산 discard 
      >>> s 
      {'Hi', 1, 2, 4, 5, 9, 'Bye'} 
      >>> s.discard("Hello") 
      >>> s.remove("Hello")  
      Traceback (most recent call last):   
      File "<stdin>", line 1, in <module> 
      KeyError: 'Hello' 
      >>> s.remove("Hi") 
      >>> s 
      {1, 2, 4, 5, 9, 'Bye'} 
      >>> s.pop()   # pop은 집합의 임의의 원소 제거 후 반환 
      1 
      >>> s.pop() 
      2  
      >>> s 
      {4, 5, 9, 'Bye'} 
 
    ii. 교집합(intersection), 합집합(union), 차집합(difference), 대칭차집합(symmetric difference) 연산
      >>> s 
      {4, 5, 9, 'Bye'} 
      >>> t = {1, 5, 3, 7, "Hi"} 
      >>> s.union(t)   # s | t 도 가능 
      {'Hi', 1, 3, 4, 5, 7, 9, 'Bye'} 
      >>> s.intersection(t)  # s & t도 가능 
      {5} 
      >>> s.difference(t)   # s - t 도 가능 
      {9, 'Bye', 4} 
      >>> t.difference(s)   # t - s 
      {'Hi', 1, 3, 7} 
      >>> s.symmetric_difference(t) # t ^ s 도 가능 
      {'Hi', 1, 3, 4, 'Bye', 7, 9} 
      >>> 9 in s 
      True 
      >>> l_s = list(s)   # s를 리스트로 변환 
      >>> l_s 
      [4, 5, 9, 'Bye'] 
      >>> t_t = tuple(t)   # t를 튜플로 변환 
      >>> t_t 
      ('Hi', 1, 3, 5, 7) 
 
  g. 언제 사용하면 유용할까? 
    ● 여러 항목을 몇 개의 클러스터로 분할하는 경우에 각 클러스터를 하나의 집합으로 표현하면 유리 
      (그룹의 소속 관계만 따지는 경우에 주로 사용) 

4. for 반복문 + list, tuple, dict, set

  a. for x in list: 또는 for x in tuple: 형식으로 인덱스 순서에 따라 x 접근 가능  
     예:  
     >>> a = [3, 2, 9]    # a = (3, 2, 9)인 경우도 마찬가지 
     >>> for x in a: 
     ...     print(x*x) 
     ... 
     9 
     4 
     81
     
  b. for k, x in dict.items(): 형식으로 key 값 k와 value 값 x의 쌍으로 접근 가능  
     for k in dict.keys():  형식으로 key 값 k에 대해 접근 가능  
     for x in dict.values():  형식으로 value 값 x에 대해 접근 가능  
     예:  
     >>> for k, x in d.items(): 
     ...      print("key =", k, "value =", x) 
     ... 
     key = a value = 10 
     key = Z value = 2 
     key = q value = 8  
 
  c. for x in set: 형식으로 접근 가능. 단, 순서는 의미 없음 
     예: 
     >>> s = {3, 1, 5} 
     >>> for x in s: 
     ...     print(x) 
     ... 
     1 
     3 
     5 

5. 컴프리헨션(comprehension) - list, dict, set 
  
  a. comprehension은 한 sequence로부터 다른 sequence를 정의하는 간단하고 유용한 방법 
  
  b. list comprehension    
    i. 예 1: 1부터 30 사이의 3의 배수만으로 구성된 리스트를 만드는 경우 
        
        ● 일반적인 방법:  
          >>> a = [ ] 
          >>> for x in range(31): 
          ...      if x % 3 == 0: 
          ...              a.append(x) 
          ... 
          >>> print(a) 
          [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30] 

        ● comprehension을 이용한 방법  
          >>> a = [x for x in range(31) if x%3 == 0] 
          >>> print(a) 
          [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30] 
          
    ii. list comprehension 일반적인 형식 
        
        b_list = [out_exp for element in a_list if condition] 
          ● a_list의 element 중에서 condition이 참인 경우에 out_exp 값으로 
            b_list를 구성하라는 의미 
            
    iii. 예 2: 1부터 9까지 제곱한 값으로 리스트를 구성한다면 
         >>> a = [ x*x for x in range(10) ] 
         >>> print(a) 
         [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] 
 
  c. set comprehension: 리스트와 유사. [] 대신 {} 사용 
    예:  
    >>> a = { x*x for x in [2, 5, 3, 2] } 
    >>> print(a) 
    {25, 4, 9} # set 이므로 중복 허용하지 않음 
 
6. 파일 입출력: 파일을 열어, 내용을 읽거나 써보기 
  
  a. 키보드 입력이나 화면 출력처럼, 파일을 열어 읽고 쓸 수 있다 (기본적이고 중요) 
  
  b. 파일 열기 (가장 먼저 할 일) → 파일의 내용을 읽거나 씀 → 파일 닫기(가장 나중 일) 
  
  c. 파일을 열 때 네 가지 모드가 존재     
    i. r:   텍스트 읽기 모드로 읽을 수만 있다 (default mode)  

    ii. w:   텍스트 쓰기 모드로 쓸 수만 있다 
    
    iii. a:   텍스트 파일 마지막부터 이어서 쓸 수 있다 
    
    iv. r+: 텍스트 파일의 읽기와 쓰기 동시 가능 모드 
 
  d. 파일 열기 
    i. open 함수 호출 → 파일 정보가 담긴 객체가 반환됨 (iterable 객체) 
      >>> f = open("test.txt", "r", encoding="utf-8")   
      # test.txt를 r(읽기)모드로 unicode utf-8(한글) 인코딩으로 열라는 의미 
      >>> f  # f에는 파일 이름, 모드, 인코딩 종류 정보가 포함됨 
      <_io.TextIOWrapper name='test.txt' mode='r' encoding='cp949'> 
      >>> print(f.name, f.mode, f.encoding) 
      test.txt r utf-8 
 
  e. 파일 읽기 
    i. read 함수: 파일 전체 내용을 읽어 하나의 문자열로 반환 
      >>> data = f.read()  # read() : 파일 전체 내용을 읽으라는 함수  
      >>> data   # data는 하나의 긴 문자열임  
      Line 1: This is Python Programming course. 
      줄2:   - 재미있고 신나는 경험이 되리라 확신합니다. ^^ 
      >>> print(f.read())  # 이미 파일의 끝까지 다 읽어서, 더 이상 읽을 내용이 없음. 결국 빈 문자열임 
      >>> f.seek(0)  # 읽을 위치를 0(byte) 위치(파일 처음)로 보냄 
      >>> f.read(10) # 10 byte만 읽음 - 없으면 전체 내용 읽음 
      Line 1: T 
 
    ii. readline 함수: 한 줄 단위로 읽어 문자열로 반환  
      >>> f.readline() # 첫 번째 줄 읽음 
      'Line 1: This is Python Programming course.\n' 
      >>> f.readline() # 두 번째 줄 읽음 
      '줄2:   - 재미있고 신나는 경험이 되리라 확신합니다. ^^' 
 
    iii. readlines 함수: 전체 내용을 줄 단위로 읽어 리스트로 반환  
      >>> f.readlines() # 첫 줄 끝에 \n (줄바꿈) 문자가 포함됨에 유의 
      ['Line 1: This is Python Programming course.\n', '줄2:   - 재미있고 신나는 경험이 
      되리라 확신합니다. ^^']  
 
    iv. for 반복문을 이용하여 더 빠르고 메모리 효율적으로 읽을수도 있음  
      >>> for line in f: 
      ...       print(line, end="") 
      ... 
      Line 1: This is Python Programming course. 
      줄2:   - 재미있고 신나는 경험이 되리라 확신합니다. ^^ 
 
  f. 파일 쓰기 
    i. write 함수: 문자열을 파일의 시작부터 차례로 쓰는 함수  
      >>> f = open("new.txt", "w", encoding="utf-8")   # new.txt가 있다면, 그대로 열어 덮어쓰게 되며,  
                                                       #  없다면 새로 파일을 만들어 쓴다 
      >>> f.write("첫 줄입니다\n") # 특수문자 \n로 인해 줄이 바뀜 
      7    # 7개의 (한글) 글자를 썼다는 의미 
      >>> f.write("This is the second line.") 
      24    # 24개의 (영어) 글자를 썼다는 의미 
      >>> f.close()   # file을 닫아야 최종적으로 저장됨! 
 
    ii. 위의 코드를 실행한 후에 new.txt 파일을 열어보자! 
 
  g. 파일 닫기 
    i. f.close(): 읽기와 쓰기를 한 후 마지막에 최종 상태 저장하는 역할 
 
  h. with … as … : 열기+읽기/쓰기+닫기 
    i. with open(...) as f: 
       f = open(...)과 동일한 효과. 블럭을 나가면 파일이 자동으로 close됨 
 
       >>> with open('file_test.txt','w') as f: f.write('test')  
       >>> with open('file_test.txt','a') as f: f.write('koko')  
       >>> with open('file_test.txt','r') as f: f.read()  
       'testkoko' 
  
  i. 텍스트 파일이 아닌 이진파일(binary file)을 다루기 
    i. 키패드로  작성된 파일은 text 파일이라 부르고, 그렇지 않은 파일
       (예: 메모장으로 열면 깨지는 파일)은 binary 파일이라 부른다 
 
    ii. jpg, hwp, pptx 등의 파일이나 모든 .exe이 이진파일이고, 읽거나 쓰기 위해선 
        파일 형식에 맞는 프로그램(앱)이 필요하다 
        
    iii. 이진파일 모드는 r, w, a 다음에 b를 붙이면 된다. 
         예: rb, wb, ab, rb+ 등 

    iv. 예: notepad.exe (메모장 실행파일)을 mynotepad.exe로 복사한다면?  
        fin = open("notepad.exe", "rb")  # 이진파일 읽기전용 오픈  
        fout = open("mynotepad.exe.txt", "wb")  # 이진파일 쓰기전용 오픈  
        data = fin.read()  
        if data: # data가 empty string이 아니라면 fout.write(data)  
        fin.close()  
        fout.close()   
